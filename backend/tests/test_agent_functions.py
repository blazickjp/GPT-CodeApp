import shutil
import json
import os
from agent.agent_functions.changes import Changes
from dotenv import load_dotenv

load_dotenv()
DIRECTORY = os.getenv("PROJECT_DIRECTORY")

temp_file = "backend/tests/test_files/agent_function_test1.py"
temp_file_full = os.path.join(DIRECTORY, temp_file)


def test_FileChange_real_world_example3():
    TEST_FILE = "backend/tests/test_files/app_setup_test.py"
    FULL_PATH = os.path.join(DIRECTORY, TEST_FILE)
    if os.path.exists(temp_file_full):
        os.remove(temp_file_full)
        shutil.copy2(FULL_PATH, temp_file_full)
    else:
        shutil.copy2(FULL_PATH, temp_file_full)

    args = json.loads(
        '{\n  "file_name": "backend/tests/test_files/agent_function_test1.py",\n  "thought": "The current exception message is not very informative. It should be updated to provide more details about the error and how to fix it.",\n  "changes": [\n    {\n      "original": "\\"\\"\\"\\nFailed to connect to database.\\nCredentials not set or changed in .env file or .env file is missing.\\nPlease set the following environment variables in the .env file in the root directory:\\nCODEAPP_DB_NAME, CODEAPP_DB_USER, CODEAPP_DB_PW, CODEAPP_DB_HOST\\n\\"\\"\\"",\n      "updated": "\\"\\"\\"\\nFailed to connect to the database. This could be due to one of the following reasons:\\n1. The credentials are not set in the .env file.\\n2. The credentials in the .env file have been changed.\\n3. The .env file is missing.\\n\\nTo fix this issue, please ensure that the .env file in the root directory contains the following environment variables with the correct values:\\n- CODEAPP_DB_NAME: The name of your database.\\n- CODEAPP_DB_USER: The username for your database.\\n- CODEAPP_DB_PW: The password for your database.\\n- CODEAPP_DB_HOST: The host of your database.\\n\\"\\"\\""\n    }\n  ]\n}'
    )
    changes = Changes(**args)
    resp = changes.execute()
    print(resp)
    with open(temp_file_full, "r") as f:
        new_text = f.read()

    assert (
        "Credentials not set or changed in .env file or .env file is missing."
        not in new_text
    )
    assert "CODEAPP_DB_NAME: The name of your database." in new_text
    assert "CODEAPP_DB_USER: The username for your database." in new_text
    os.remove(temp_file_full)


def test_FileChange_real_world_example4():
    TEST_FILE = "backend/tests/test_files/app_setup_test.py"
    FULL_PATH = os.path.join(DIRECTORY, TEST_FILE)
    if os.path.exists(temp_file_full):
        os.remove(temp_file_full)
        shutil.copy2(FULL_PATH, temp_file_full)
    else:
        shutil.copy2(FULL_PATH, temp_file_full)

    changes = Changes(
        file_name=temp_file,
        thought="none needed for test",
        changes=[
            {
                "original": "Queries the GPT-3 model with the given input and command.\n\nParameters:\ninput (str) : The input text to be processed by the GPT-3 model.\ncommand (Optional[str]) : The command to be executed by the agent.\n\nReturns:\nList[str] : The output generated by the GPT-3 model.",
                "updated": "Queries the GPT-3 model with the given input and command.\n\nArgs:\n    input (str): The input text to be processed by the GPT-3 model.\n    command (Optional[str]): The command to be executed by the agent.\n\nReturns:\n    List[str]: The output generated by the GPT-3 model.",
            }
        ],
    )
    resp = changes.execute()
    print(resp)
    with open(temp_file_full, "r") as f:
        new_text = f.read()
    assert "Args:" in new_text


def test_match_partial():
    changes = Changes(file_name="test.py", thought="testing", changes=[])
    print(changes.match_partial(["    a", "    b"], ["  a", "  b"]))

    assert changes.match_partial(["    a", "    b"], ["a", "b"]) == (0, 2, 4)
    assert changes.match_partial(["    a", "    b"], [" a", " b"]) == (0, 2, 3)
    assert changes.match_partial(["    a", "    b"], ["  a", "  b"]) == (0, 2, 2)
    assert changes.match_partial(["    a", "    b"], ["   a", "   b"]) == (0, 2, 1)
    assert changes.match_partial(["    a", "    b"], ["    a", "    b"]) == (0, 2, 0)
    assert changes.match_partial(["    x", "    a", "    b"], ["a", "b"]) == (1, 3, 4)


def test_replace_part_with_missing_leading_whitespace():
    changes = Changes(file_name="test.py", thought="testing", changes=[])

    assert (
        changes.replace_part_with_missing_leading_whitespace(
            ["    a", "    b"], ["a", "b"], ["c", "d"]
        )
        == "    c\n    d"
    )
    assert (
        changes.replace_part_with_missing_leading_whitespace(
            ["    a", "    b"], [" a", " b"], [" c", " d"]
        )
        == "    c\n    d"
    )
    assert (
        changes.replace_part_with_missing_leading_whitespace(
            ["    a", "    b"], ["  a", "  b"], ["  c", "  d"]
        )
        == "    c\n    d"
    )
    assert (
        changes.replace_part_with_missing_leading_whitespace(
            ["    a", "    b"], ["   a", "   b"], ["   c", "   d"]
        )
        == "    c\n    d"
    )
    assert (
        changes.replace_part_with_missing_leading_whitespace(
            ["    a", "    b"], ["    a", "    b"], ["    c", "    d"]
        )
        == "    c\n    d"
    )
    assert (
        changes.replace_part_with_missing_leading_whitespace(
            ["    a", "    b"], ["a", " c"], ["c", "d"]
        )
        == "    a\n    b"
    )
    assert (
        changes.replace_part_with_missing_leading_whitespace(
            ["        a", "        b"], ["    a", "     b"], ["    c", "        d"]
        )
        == "        c\n            d"
    )
