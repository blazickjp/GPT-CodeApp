# app_setup.py
import os
import sqlite3
from agent.agent import CodingAgent
from agent.memory_manager import MemoryManager
from database.my_codebase import MyCodebase
from dotenv import load_dotenv
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional, Any, Callable, List
from pydantic import BaseModel
from agent.agent_functions.changes import Changes
from agent.agent_functions.shell_commands import CommandPlan

load_dotenv()


def create_database_connection():
    try:
        conn = sqlite3.connect("database.db", check_same_thread=False)
        print("Successfully connected to database")
        return conn
    except Exception as e:
        print(e)
        raise e


DB_CONNECTION = create_database_connection()
DIRECTORY = os.getenv("PROJECT_DIRECTORY", ".")

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


class FunctionCall(BaseModel):
    callable: Callable
    name: str = ""
    arguments: str = ""

    def __call__(self) -> Any:
        return self.callable(self.arguments)


def setup_memory_manager(tree: Optional[str]) -> MemoryManager:
    memory_manager = MemoryManager(db_connection=DB_CONNECTION, tree=tree)
    return memory_manager


def setup_codebase() -> MyCodebase:
    my_codebase = MyCodebase(directory=DIRECTORY, db_connection=DB_CONNECTION)
    return my_codebase


def setup_app() -> CodingAgent:
    codebase = setup_codebase()
    memory = setup_memory_manager(tree=codebase.tree())
    agent = CodingAgent(memory_manager=memory, callables=[CommandPlan, Changes])
    return agent, codebase


def query(self, input: str, command: Optional[str] = None) -> List[str]:
    """
    Queries the GPT-3 model with the given input and command.

    Parameters:
    input (str) : The input text to be processed by the GPT-3 model.
    command (Optional[str]) : The command to be executed by the agent.

    Returns:
    List[str] : The output generated by the GPT-3 model.
    """
    pass
